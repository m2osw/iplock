# Communicator connections

[variables]

# communicatord_public=<port>
#
# The port your communicator daemon listens on the public networks.
#
# This port only accepts encrypted connections. This means it is safe
# to use accross the Internet.
#
# Note: if you have a single data center, it is expected that you close
#       this port. You can prevent all connections to this port by setting
#       this variable to empty.
#
# Default: 4043
communicatord_public=4043


# communicatord_private=<port>
#
# The port your communicator daemon listens on the private networks (LAN).
#
# This port accepts plain connections (no encryption) and thus it
# should never be used on the public network (the Internet).
#
# Default: 4042
communicatord_private=4042


# communicatord_udp=<port>
#
# The communicator daemon also accepts UDP messages. In most cases, those
# are used to send a signal such as a PING to wake up a process and let it
# know that new data is available (i.e. a front end added a batch job and
# it wants to wake up the corresponding batch process).
#
# This port is not encrypted. By default, the rules open the port only
# on the private network (LAN).
#
# Default: 4041
communicatord_udp=4041



[rule::communicatord_public]
chains = INPUT
condition = '"${communicatord_public}" != ""'
source_interfaces = ${public_interfaces}, ${private_interfaces}
destination_ports = ${communicatord_public}
protocols = tcp
states = new
action = ACCEPT

[rule::communicatord_private]
chains = INPUT
condition = '"${communicatord_private}" != ""'
source_interfaces = ${private_interfaces}
sources = ${private_networks}
destination_ports = ${communicatord_private}
protocols = tcp
states = new
action = ACCEPT

[rule::communicatord_udp]
chains = INPUT
condition = '"${communicatord_udp}" != ""'
source_interfaces = ${private_interfaces}
sources = ${private_networks}
destination_ports = ${communicatord_udp}
protocols = udp
state = new
action = ACCEPT

# vim: syntax=dosini
