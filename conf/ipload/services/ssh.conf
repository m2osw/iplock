# SSH

[variables]

# admin_interfaces=<name>[, <name>, ...]
#
# A list of interfaces that the administrator can access from the outside.
# In general, this is useful for SSH access to the computer. That is defined
# by default.
#
# Default: <none>
admin_interfaces=


# admin_ips=<address>[, <address>, ...]
#
# A list of addresses that the administrators use to access this server.
# This is very practical if each of your administrators have a static IP
# address.
#
# This list is mandatory. Without it, the rule opening the SSH port is
# not generated meaning that all attempts to connect to your SSH server
# fail.
#
# Default: <none>
admin_ips=


# ssh_port=<port>
#
# The SSH port you use. The default is 22 which is the standard port.
# Note that changing this port is not very useful. An nmap run against
# your server can very easily find SSH if the port is widely opened.
# If you still want to hide your port, you have two solutions to this
# problem:
#
#   1. Get a static IP address then use that in the admin_ips variable
#   2. Make use of a knocking sequence
#
# Some people say that the knocking sequence is useless. This is because
# some knock implementations wide open the port. With the firewall knocking
# capability, you instead always have to go through the knocking to reach
# the port. Therefore this is much safer. It's not a 100% sure thing since
# a hacker may still be able to find your port knocking sequence. But the
# truth is that they have something like 1 in 14 trillion chances if you
# use just 3 ports for the knocking.
#
# Default: 22
ssh_port=22


# ssh_knock_ports=<port>[, <port>, ...]
#
# Define a list of ports to knock in order to open access to the SSH port.
#
# For example, the following:
#
#    tcp:100/20s, udp:300/5s, 200/5m
#
# allows you to access your SSH port by:
#
#  1. opening TCP port 100
#  2. within 20 seconds, opening UDP port 300
#  3. within 5 seconds, opening port 200
#  4. within 5 minutes, accessing port 22
#
# Note that any port between 0 and 65535 can be used. However, it is safer
# to pick ports that are not used for other services to make sure they do
# not get _redirected_ (reach an ACCEPT rule) before the port knocking is
# reached. Also ports over 49152 are reserved for ephemeral ports (i.e.
# ports used by TCP/UDP when your server connects to another computer).
# Port 0 is also likely to cause some form of issues. We accept it, but
# we did not even test to see whether it would work. So the safest
# knock-knock ports are between 1 and 49151 except those where you have
# a service running.
#
# It is suggested that if you are to use port knocking that you use at
# least 3 ports. However, more than 5 is probably not useful.
#
# To knock the port open, use the knock-knock tool. You can use the same
# list as above on the command line, only without the commas and durations:
#
#     knock-knock <destination-ip> tcp:100 udp:300 200 --delay 0.1s
#
# Then you can use SSH to connect as usual:
#
#    ssh <destination-ip>
#
# Default: <none>
ssh_knock_ports=



[verify]
ssh_port=required


# Allow admins to connect through SSH
[rule::ssh_by_admins]
section = early_content
after = established_input
before = unwanted_call
chains = INPUT
condition = '"${admin_ips}${ssh_knock_ports}" != ""'
source_interfaces = ${admin_interfaces}
sources = ${admin_ips}
destination_port = ${ssh_port}
knocks = ${ssh_knock_ports}
knock_clear=denylist, synflood
protocols = tcp
state = new
action = ACCEPT

# Forbid all others
[rule::block_ssh]
section = early_content
after = ssh_by_admins
before = unwanted_call
chains = INPUT
protocol = tcp
destination_port = ${ssh_port}
action = DROP
log = unwanted_ssh

# vim: syntax=dosini
