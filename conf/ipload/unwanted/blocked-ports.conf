# Blocked Ports

[variables]

# blocked_ports=<port>[, <port>, ...]
#
# Ports that are often scanned and you do not need to get a LOG each time
# these are accessed. Adding a port here means access to that port does
# not get logged. The IP address of the offender may also get added to
# the blacklist for a while (TODO).
#
# Note that some of these ports may be opened before the blocked-ports.conf
# rules are reached (i.e. port 22) which means the port is still accessible
# as expected since this rule is never going tobe reached with that specific
# port.
#
#     21            ftp/fsp
#     22            ssh (also 222, 2222)
#     23            telnet (also 123, 2323)
#     67, 68        dhcp
#     80, 81        http, http-alt (also 8000, 8001, 8080, 8081, 8088, 8089, 8888)
#    137, 138, 139  netbios-ns, netbios-dgm, netbios-ssn
#    443, 4343      https, https-alt
#    666            hell (also 6666)
#    947            apply-rpc
#   1900            ssdp (plug and play)
#   5060            sip
#   5555            ucm (Oracle universion content manager)
#   7547            cwmp (various routers offering remote connections)
#   7777            ichat
#
# Default: ... (see above/below)
blocked_ports=67, 68, \
	137, 138, 139, \
	7777


# blacklist_ports=<port>[, <port>, ...]
#
# This list of ports get blocked likst the `blocked_ports`. So TCP or UDP
# connections on those ports are DROP as well.
#
# However, `blacklist_ports` are also blacklisted in a set handled by the
# iptables recent module. That means the unwanted recent rules will block
# any further access from that IP address.
#
# Default: ... (see blocked_ports and below)
blacklist_ports=21, \
	22, 222, 2222, \
	23, 123, 2323, \
	80, 81, 8000, 8001, 8080, 8081, 8088, 8089, 8888, \
	443, 4343, \
	666, 6666, \
	947, \
	1900, \
	5060, \
	5555, \
	7547


# Ports that we know we receive a lot of traffic on even though they are
# closed and we do not care much about getting a log.
#
# TODO: add the IP address of each offender to the blacklist; that way those
#       offenders cannot go on with any type of attacks and find actually
#       opened ports
#

[rule::blocked_ports]
chains = INPUT
section = late_content
after = ping, ping6
condition = '"${blocked_ports}" != ""'
source_interfaces = ${public_interfaces}
destinations = ${public_ips}
destination_ports = ${blocked_ports}
protocols = tcp, udp
action = DROP

[rule::blacklist_ports]
chains = INPUT
section = late_content
after = ping, ping6
condition = '"${blocked_ports}" != ""'
source_interfaces = ${public_interfaces}
destinations = ${public_ips}
destination_ports = ${blacklist_ports}
protocols = tcp, udp
action = CALL add_to_blacklist

# vim: syntax=dosini
