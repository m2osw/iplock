# Blocked Ports

[variables]

# blocked_ports=<port>[, <port>, ...]
#
# Ports that are often scanned and you do not need to get a LOG each time
# these are accessed. Adding a port here means access to that port does
# not get logged. The IP address of the offender may also get added to
# the denylist for a while (TODO).
#
# Note that some of these ports may be opened before the blocked-ports.conf
# rules are reached (i.e. port 22) which means the port is still accessible
# as expected since this rule is never going tobe reached with that specific
# port.
#
#     67, 68        dhcp
#    137, 138, 139  netbios-ns, netbios-dgm, netbios-ssn
#   7777            ichat
#
# Default: ... (see above/below)
blocked_ports=67, 68, \
	137, 138, 139, \
	7777


# denylist_ports=<port>[, <port>, ...]
#
# This list of ports get blocked like the `blocked_ports`. So TCP or UDP
# connections on those ports are DROP as well.
#
# However, source address of the user being denied by the `denylist_ports`
# are also added to the denylist which is a set handled by the iptables
# recent module. That means the unwanted recent rules block any further
# access from that IP address for the amount of time specified in the
# `denylist_duration` variable.
#
#     21            ftp/fsp
#     22            ssh (also 222, 2222)
#     23            telnet (also 123, 2323)
#     80, 81        http, http-alt (also 8000, 8001, 8080, 8081, 8088, 8089, 8888)
#    443, 4343      https, https-alt
#    666            hell (also 6666)
#    829            certificate management protocol (cmp)
#    947            apply-rpc
#   1900            ssdp (plug and play)
#   5060            sip
#   5555            ucm (Oracle universion content manager)
#   7547            cwmp (various routers offering remote connections)
#
# Default: ... (see above/below)
denylist_ports=21, \
	22, 222, 2222, \
	23, 123, 2323, \
	80, 81, 8000, 8001, 8080, 8081, 8088, 8089, 8888, \
	443, 4343, \
	666, 6666, \
	829, \
	947, \
	1900, \
	5060, \
	5555, \
	7547


# safe_source_ports=<port>[, <port>, ...]
#
# At the moment, I think that source ports that get blocked by the
# `small_ports` rule may actually be semi-valid traffic. In other words,
# we were communicating with a website or some other service and when we
# closed the communication, the server on the other side sent us some
# additional packets (i.e. `ACK RST`). In that case, we do not want to
# block the IP address of the sender.
#
# This list of ports are considered _safe_ in the sense that we probably
# connected to said port and need to keep the IP address open. We only
# DROP this traffic instead of adding it to our denylist.
#
# Default: 25, 80, 443
safe_source_ports=25, 80, 443



[rule::blocked_ports]
chains = INPUT
section = late_content
after = ping, ping6
condition = '"${blocked_ports}" != ""'
source_interfaces = ${public_interfaces}
destinations = ${public_ips}
set = blocked_ports
set_type = bitmap:port
set_data = ${blocked_ports}
#destination_ports = ${blocked_ports}
protocols = tcp, udp
action = DROP

[rule::denylist_ports]
chains = INPUT
section = late_content
after = ping, ping6
condition = '"${denylist_ports}" != ""'
source_interfaces = ${public_interfaces}
destinations = ${public_ips}
set = denylist_ports
set_type = bitmap:port
set_data = ${denylist_ports}
#destination_ports = ${denylist_ports}
protocols = tcp, udp
action = CALL add_to_denylist

[rule::small_ports_safe]
chains = INPUT
section = early_content
after = unwanted_call
condition = "'${safe_source_ports}' != ''"
# IMPORTANT: many icmp errors would match, it is strongly recommended that
#            you do not add the ICMP protocol
protocols = tcp, udp
source_interfaces = ${public_interfaces}
source_ports = ${safe_source_ports}
action = DROP
description = "Ports that we connect to and do not want to block completely (in case some semi-legal packet make it here)."

[rule::small_ports]
chains = INPUT
section = early_content
after = unwanted_call, small_ports_safe
source_interfaces = ${public_interfaces}
source_ports = 0:1023
protocols = tcp, udp
# I want to gather data before denying these completely
#action = CALL add_to_denylist
action = DROP
log = "small-port"
description = "Prevent incoming packets with a reserved source port"

# vim: syntax=dosini
