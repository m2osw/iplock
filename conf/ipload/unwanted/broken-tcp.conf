# Broken TCP Requests

# Just drop INVALID packets
#
[rule::invalid_packet]
section = header
chains = INPUT
interfaces = ${public_interfaces}
states = invalid
action = DROP

# ACK, RST, FIN|ACK and PSH|ACK happen from legitimate IPs, when they are not
# properly established connections; however, logging such is not a
# good idea since fail2ban could block otherwise legitimate connections

# If it comes from the outside, drop those packets
#
[rule::broken_tcp_public]
section = early_content
chains = INPUT
after = established_input
interfaces = ${public_interfaces}
set = broken_tcp_public
set_data = ${public_ips}
#destinations = ${public_ips}
protocols = tcp
states = ack, rst, fin|ack, psh|ack
action = DROP

# If it comes from the LAN, just reject those packets
#
[rule::broken_tcp_private]
section = early_content
chains = INPUT
after = established_input
interfaces = ${private_interfaces}
set = broken_tcp_private
set_type = hash:net
set_data = ${private_networks}
#destinations = ${private_networks}
protocols = tcp
states = ack, rst, fin|ack, psh|ack
action = REJECT adm-prohibited

# vim: syntax=dosini
