# Unwanted Call

[variables]

# allow_unwanted_exceptions=<on | off>
#
# Whether to allow unwanted exceptions. By default, we allow the
# administrators to pass all rules in the 'unwanted' chain by
# returning early if the source IP address matches the IP address
# of one of the administrators.
#
# The administrator IP addresses are found in the 'admin_ips = ...'
# variable. If that variable is empty, then no early RETURN rule
# gets added.
#
# Note: by default we open the SSH port (see "ssh_port = ...")
#       before calling the "unwanted" rule so if nothing else,
#       the administrators will be able to SSH in to fix the
#       firewall if other services get stuck.
#
# Default: off
allow_unwanted_exceptions=off


# blocked_ips=<ip>[, <ip>, ...]
#
# Specific IP Addresses that you always want blocked.
#
# This is rarely used, but some server just either misbehaves or hackers
# setup a bot which really hammers your services.
#
# These are misbehaving IP addresses that you want to permanently block
# they automatically get added to the unwanted chain. If the variable
# is empty then no such rule gets added. All interfaces, protocols, ports
# get blocked for those IPs.
#
# When empty, no rule is added to block specific addresses.
#
# The `iplock` tool adds and removes addresses to the "unwanted" set
# instead. However, those will not remain forever. The IPs added to
# this variables are blocked until removed from that variable.
#
# Default: <empty>
blocked_ips=



[rule::unwanted_call]
section = early_content
chains = INPUT
action = CALL unwanted

[rule::unwanted_exceptions]
chain = unwanted
condition = '"${allow_unwanted_exceptions}" == "on" && "${admin_ips}" != "" && "${admin_ips}" != "0.0.0.0/0"'
section = header
source = ${admin_ips}
action = RETURN
description = "Prevent blocking the administrators by default"

[rule::unwanted_set]
chain = unwanted
set = unwanted
action = DROP

[rule::unwanted_droplist]
chain = ipv4, unwanted
set = unwanted_droplist
set_type = hash:net
set_from_file = drop.txt
action = DROP

[rule::unwanted_edroplist]
chain = ipv4, unwanted
set = unwanted_edroplist
set_type = hash:net
set_from_file = edrop.txt
action = DROP

[rule::unwanted_dropv6list]
chain = ipv6, unwanted
set = unwanted_dropv6list
set_type = hash:net
set_from_file = dropv6.txt
action = DROP

[rule::blocked_ips]
chain = unwanted
after = unwanted_set
conditions = '"${blocked_ips}" != ""'
sources = ${blocked_ips}
action = DROP

# vim: syntax=dosini
