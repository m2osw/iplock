# Forward Packets

# If you have a local network (LAN) and want to allow your LAN computers
# to access the Internet without allowing them to access the router itself
# then using FORWARDing and MASQUERADing is the easiest way.
#
#     +------------+       +----------+       +----------------+
#     |            |       |          |       |                |
#     |  Internet  +<----->+  Router  +<----->+  LAN Computer  |
#     |            |       |          |  LAN  |                |
#     +------------+       +----------+       +----------------+
#
# On the Router you set FORWARD rules that send traffic from your private
# LAN interface to the public Internet connection. Data coming back marked
# as coming from a private LAN interface and on an established connection
# can be sent back to that LAN computer.
#
# Any other incoming packets are dropped.
#
# Keep in mind also that the FORWARD chain calls the `bad_packets` chain
# first so many packets are dropped at that point. You must make sure that
# the private IP addresses of the computer you want to allow through the
# forwarding/masquerading mechanism are not blocked there.
#
# The forwarding setup includes three parts:
#
#   1) in the FORWARD chain where we forward packets from the Internet to
#      the private interface (LAN)
#
#         -A FORWARD -i <public-interface> -o <private-interface> -p tcp -m state --state ESTABLISHED,RELATED -m tcp ! -s <gateway> -d <lan-ip> ! --syn -j ACCEPT
#         -A FORWARD -i <public-interface> -o <private-interface> -p udp -m state --state ESTABLISHED,RELATED -m udp ! -s <gateway> -d <lan-ip> -j ACCEPT
#         -A FORWARD -i <public-interface> -o <private-interface> -p icmp -m icmp --icmp-type any ! -s <gateway> -d <lan-ip> -j ACCEPT
#
#   2) in the FORWARD chain where we accept any outgoing traffic which we
#      redirect from the private interface (LAN) to the Internet
#
#         -A FORWARD -i <private-interface> -o <public-interface> -p tcp -m tcp -s <lan-ip> -j ACCEPT
#         -A FORWARD -i <private-interface> -o <public-interface> -p udp -m udp -s <lan-ip> -j ACCEPT
#         -A FORWARD -i <private-interface> -o <public-interface> -p icmp -m icmp --icmp-type any -s <lan-ip> -j ACCEPT
#
#      note that the <lan-ip> addresses can include a mask (i.e. 10.0.7.0/24).
#
#   3) in the NAT table POSTROUTING chain where we redirect packets coming
#      out of your LAN computer to the Internet.
#
#         -A POSTROUTING -o <public-interface> -s <lan-ip> -j MASQUERADE
#


[variables]

# forward_mode=|open|limited
#
# Whether to have forwarding setup or not.
#
# 1. empty string
#
# By default, this feature is turned off. The value in this case is the
# empty string ("not set").
#
# 2. "open"
#
# If `forward_mode` is set to "open", then no tests are performed on IPs.
# In this case, the public and private interfaces are used. It defines how
# the traffic gets forwarded.
#
# 3. "limited"
#
# If `forward_mode` is set to "limited", then the `forward_gateway` and
# `forward_private_ips` get used. Only those IPs can participate in the
# forwarding.
#
# Tne `forward_gateway` is the source (in general, the IP address of the
# computer connected to the Internet). The `forward_private_ips` are the
# computers on your LAN which you want to have access to your Internet
# connection. The public and private interfaces correspond to the
# interfaces used to connect to the Internet (public) and the interface
# used to connect to the LAN computers (private). The two can use the same
# interface, but then it's not safe at all. It is very strongly recommanded
# that you make use of two separate physical network interfaces.
#
# Default: <none>
forward_mode=

# forward_public_interface=<interface name>
#
# Define the public interface. In general, this is your router. The computer
# connected to the Internet.
#
# (TODO: condition is not yet supporting multiple tests so it can't be done)
# If empty, do not generate the rules.
#
# Default: ${gateway_interface}
forward_public_interface=${gateway_interface}

# forward_private_interface=<interface name>
#
# Define the private interface. This is the interface where you connect your
# LAN computers. It is very important that you consider using two distinct
# interfaces for public and private traffic if you want to make sure that
# it is secure.
#
# (TODO: condition is not yet supporting multiple tests so it can't be done)
#
# Default: <none>
forward_private_interface=

# forward_gateway=<address>
#
# The IP address of the gateway of the computer doing the forwarding.
# Packets being sent from that IP address are ignored by the forwarding
# mechanism.
#
# By default, the gateway IP is not defined. It works that way as well.
# It is just safer with a gateway.
#
# If your LAN computers are on network 192.168.10.0/24, the gateway
# is likely 192.168.10.1. This is the IP you want in this variable.
#
# Note: because of the way the rules are defined, you cannot define more
#       than one forward gateway; if you create multiple LAN (work, game,
#       family, etc.) then you will have to create your own variable or
#       directly define the gateway in the additional networks you add to
#       your firewall
#
# Default: <empty>
forward_gateway=

# forward_static_gateway=<address>
#
# The IP address where you want to send the data from your LAN computers.
# When this IP is defined, we use the SNAT target. Otherwise, we use the
# MASQUERADE.
#
# Default: ${gateway}
#
# the static gateway is not yet available (conditions are not good enough yet)
#forward_static_gateway=${gateway}

# forward_private_ips=<address>[, <address>, ...]
#
# Define a list of IP addresses which represent computers on your LAN.
# Multiple IPs are separated by commas
#
# If no IP addresses are defined (default), then all the computers connected
# to the private interface (see `forward_private_interface`) will have their
# data transferred.
#
# Default: <none>
forward_private_ips=



# The forward setup puts the forward rules themselves in a separate chain
# so it can be reused by the DOCKER-USER chain. This is because I like to
# run docker tests where people in the outside should not be able to connect
# to the services I run in docker. By default, it's wide open and if you have
# a static IP address, hackers can very easily access your docker.


[rule::open_forward_traffic]
section = content
chain = FORWARD
condition = '"${forward_mode}" == "open"'
action = CALL forward_traffic

[rule::limited_forward_traffic]
section = content
chain = FORWARD
condition = '"${forward_mode}" == "limited"'
action = CALL forward_traffic

[rule::forward_packet_in]
section = content
chain = forward_traffic
condition = '"${forward_mode}" == "open"'
source_interface = ${forward_public_interface}
destination_interface = ${forward_private_interface}
protocols = tcp, udp, icmp, icmpv6
states = any
action = ACCEPT

[rule::forward_packet_out]
section = content
chain = forward_traffic
condition = '"${forward_mode}" == "open"'
source_interface = ${forward_private_interface}
destination_interface = ${forward_public_interface}
protocols = tcp, udp, icmp, icmpv6
states = any
action = ACCEPT

[rule::forward_packets_in]
chain = forward_traffic
condition = '"${forward_mode}" == "limited"'
source_interface = ${forward_public_interface}
destination_interface = ${forward_private_interface}
except_source = ${forward_gateway}
destination = ${forward_private_ips}
protocols = tcp, udp
states = established | related | !new
action = ACCEPT

[rule::forward_packets_out]
chain = forward_traffic
condition = '"${forward_mode}" == "limited"'
source_interface = ${forward_private_interface}
destination_interface = ${forward_public_interface}
sources = ${forward_private_ips}
protocols = tcp, udp
action = ACCEPT

[rule::forward_icmp_packets_in]
chain = forward_traffic
after = forward_packets_out
condition = '"${forward_mode}" == "limited"'
except_source = ${forward_gateway}
source_interface = ${forward_public_interface}
destination_interface = ${forward_private_interface}
destination = ${forward_private_ips}
protocols = icmp, icmpv6
states = any
action = ACCEPT

[rule::forward_icmp_packets_out]
chain = forward_traffic
after = forward_packets_out
condition = '"${forward_mode}" == "limited"'
source_interface = ${forward_public_interface}
destination_interface = ${forward_private_interface}
source = ${forward_private_ips}
protocols = icmp, icmpv6
states = any
action = ACCEPT

[rule::masquerade_open]
table = nat
chain = POSTROUTING
condition = '"${forward_mode}" == "open"'
destination_interface = ${forward_public_interface}
action = MASQUERADE

[rule::masquerade_limited]
table = nat
chain = POSTROUTING
condition = '"${forward_mode}" == "limited"'
#                 && '${forward_static_gateway}' == ''
destination_interface = ${forward_public_interface}
sources = ${forward_private_ips}
action = MASQUERADE

# If you have a static IP, you probably want to use this rule instead of
# MASQUERADE -- it is faster to use SNAT, but it may reuse lingering
# connections after a loss of connectivity which can be less secure
#[rule::masquerade_narrow]
#table = nat
#chain = POSTROUTING
#condition = '"${forward_mode}" == "limited"'
##                 && '${forward_static_gateway}' != ''
#destination_interface = ${forward_public_interface}
#sources = ${forward_private_ips}
#action = SNAT ${forward_static_gateway}

# vim: syntax=dosini
