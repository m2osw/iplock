# Configuration file for HTTP access
#
# This file defines the list of ports and the command lines to use to
# block or unblock those ports.


# ports=<comma separated list of ports>
#
# List of ports to block with the block and unblock commands.
#
# If you use other ports than the default, please copy this file under
# /etc/iplock/iplock.d and add additional ports.
#
# Default: 80,443
ports=80,443


# allowlist=<comma separated list of IP addresses>
#
# The allowlist is used to know whether an IP address should be blocked or
# not. You should probably enter your IP address if you are an administrator.
# Also if you use services to verify your system security, add their IP
# addresses here.
#
# The allowlist supports CIDR masks, so you may use an address followed
# by a slash and a number or a mask in the form of an IP address. For
# example, to allow all private network 10.0.0.0 IP addresses, one can
# write:
#
#    allowlist=10.0.0.0/8
#    # or
#    allowlist=10.0.0.0/255.0.0.0
#
# Default: <none>
allowlist=


# check=<iptables check command>
#
# Command to check whether a certain rule is already in that iptables
# chain or not. If it is, then no need to readd it. If it is not, then
# no need to remove it. That way we can optimize the --block and --unblock
# commands.
#
# The command has to exit with 0 if the rule exists and 1 otherwise.
#
# Default: [command] -C [chain] -i [interface] -p tcp -m tcp -s [ip] --dport [port] -j DROP
check=[command] -C [chain] -i [interface] -p tcp -m tcp -s [ip] --dport [port] -j DROP


# TODO:
# check6=ip6tables ...


# block=<iptables insert or append command>
#
# Command to block an IP address using your firewall. By default this
# command inserts the new rule at the start of your chain. The `-A`
# (append) command could also be used to append the rule. We insert
# by default because that way the rule is first and thus hit first
# and since you just detected that unwanted IP address, it makes sense
# to have it first.
#
# Note that you cannot use the [num] parameter to replace an existing
# rule. If you were to try to use `-R` it would keep a single rule
# in your chain, which is not what you want.
#
# Default: [command] -I [chain] [num] -i [interface] -p tcp -m tcp -s [ip] --dport [port] -j DROP
block=[command] -I [chain] [num] -i [interface] -p tcp -m tcp -s [ip] --dport [port] -j DROP


# TODO:
#block6=ip6tables ...


# unblock=<iptables delete command>
#
# Command to unblock an IP address previously blocked with the block
# command. Generally speaking, the command line must be pretty much
# the same as the `block` command line except for the `-I` or `-A`
# that become `-D`.
#
# Default: [command] -D [chain] -i [interface] -p tcp -m tcp -s [ip] --dport [port] -j DROP
unblock=[command] -D [chain] -i [interface] -p tcp -m tcp -s [ip] --dport [port] -j DROP


# TODO:
#unblock6=ip6tables ...


# batch=<batch firewall rule>
#
# This command is used to append a rule into a firewall, but as a batch.
# So many of these entries will be appended into a file, then sent to the
# [batchcmd] tool.
#
# Default: [command] -A [chain] -i [interface] -p tcp -m tcp -s [ip] --dport [port] -j DROP
batch=[command] -A [chain] -i [interface] -p tcp -m tcp -s [ip] --dport [port] -j DROP


# vim: wrap
