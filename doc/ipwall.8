.TH IPWALL 1 "August 2022" "ipwall 1.x" "User Commands"
.SH NAME
ipwall \- Service to block and unblock IP addresses in your firewall
.SH SYNOPSIS
.B ipwall
[\fIOPTION\fR]...
.SH DESCRIPTION
The \fBipwall(8)\fR service understands the `BLOCK' and `UNBLOCK' messages that are
used to immediately block and unblock an IP address. The command can be
broadcasted using the communicator daemon so all your computers in your
entire cluster can instantly block a hacker's IP address.
.PP
Say your website system is accessed at a URL which starts with `/wp-admin'
but you are not running Wordpress. Immediately, you recognize that the
person behind that access is a hacker and you can send the user's IP address
to your firewall so further communication from that user is blocked.
.PP
The block is for 24 hours by default. It can be changed to a few other
possible values such as 5 minutes or forever.
.PP
The \fBipwall(8)\fR service automatically starts after the \fBipload(1)\fR ran.
It runs until stopped or the computer is shutdown. It uses the
\fBiplock(1)\fR tool in order to add and remove IP addresses from various
chains defined in the iptables firewall or sets of IPs.

.SH "COMMAND LINE OPTIONS"
.TP
\fB\-\-build\-date\fR
Display the date and time when the tool was last built.

.TP
\fB\-\-command\-help\fR
List the commands understood by \fBipwall(8)\fR.

.TP
\fB\-\-compiler\-version\fR
Output the version information of the C++ compiler used to compile the
`advgetopt' library. In most cases, this is the same as the compiler used
to compile the \fBipwall(8)\fR tool.

.TP
\fB\-\-config\-dir\fR [\fISOURCE\fR]...
Define a list of configuration directories to search for configuration files.

.TP
\fB\-\-configuration\-filenames\fR
List the filename of each configuration file that \fBipwall(8)\fR reads on
startup.

.TP
\fB\-\-console\fR
Print the logs out to the console. This overrides the logger configuration
files.

.TP
\fB\-C\fR, \fB\-\-copyright\fR
Print out the copyright notice of the \fBipwall(8)\fR tool.

.TP
\fB\-\-debug\fR
Change the logger severity to the `debug' level. This command line option
changes the level of all the appenders configured for \fBipwall(8)\fR.

.TP
\fB\-\-environment\-variable\-name\fR
Print the name of the variable to the console. This variable can be used
to enter options instead of writing them on the command line or the
configuration file. Commands are not allowed in the environment variable.

.TP
\fB\-\-except\-stack\-collect\fR \fIno|yes|simple|complete\fR
Defines what exceptions are expected to collect from the stack.
Nearly all our exceptions are expected to stop a process. This command line
option gives you the ability to define how much information is to be collected
from the stack trace when that exception occurred. By default, it is set to
`yes' (which is the synomym of `simple'). With the logger, that exception
stack information can automatically be logged to your log file. Very useful
to debug issues in your software running on a remote server.

.TP
\fB\-\-force\-severity\fR \fIlevel\fR
Change the logger severity to this specific level. This new level is
applied to all the defined appenders. The level is changed whether it
is higher or lower than the current appender's level.

.TP
\fB\-\-has\-sanitizer\fR
Print whether this version was compiled with the C++ compiler sanitizer.

.TP
\fB\-h\fR, \fB\-\-help\fR
Print a brief document about the tool usage, then exit.

.TP
\fB\-L\fR, \fB\-\-license\fR
Print out the license of \fBipwall(8)\fR and exit.

.TP
\fB--list-appenders\fR
List the available appenders as used by the logger.

.TP
\fB\-\-list\-severities\fR
List the available severities as used by the logger.

.TP
\fB\-\-log\-component\fR \fIname\fR...
Define one or more component name to filter the logs. Only logs with that
component are output, others are ignored. You can use the `!' (exclamation
mark) character in front of a name to exclude logs with that component.

.TP
\fB\-\-log\-config\fR \fIfilename\fR
Only load this very configuration file to setup the logger.

.TP
\fB\-\-log\-config\-path\fR \fIpath\fR
Define a path to search for log configuration files instead of using the
defaults.

.TP
\fB\-\-log\-file\fR \fIfilename\fR
Save the logs in this specific file instead of what is defined in the
configuration files.

.TP
\fB\-\-log\-severity\fR \fIlevel\fR
Change the severity to this level unless the appender already accepts logs
for a lower level. So for example, an appender setup to output logs with a
severity level of `error' or higher is affected by the `warning' level.
An appender setup to output logs with a severity level of `info' does not
changed when setting this command line option to `warning'.

.TP
\fB\-\-logger\-configuration\-filenames\fR
List the files that the logger reads to be setup. If no files are found,
then messages appear in the console by default.

.TP
\fB\-\-logger\-hide\-banner\fR
Request that the logger does not print the banner in the console. This is
particularly useful for command line tools (opposed to a service).

.TP
\fB\-\-logger\-plugin\-paths\fR \fIpath1:path2:...\fR
This option allows you to change the path(s) to the `snaplogger' plugins. You
can enter multiple paths by separating them with a colon (:).

.TP
\fB\-\-logger\-show\-banner\fR
Request that the logger prints its banner when it starts. This is useful
if you run a tool from a service and want to make sure the administrator
knows which version of the tool is being used.

.TP
\fB\-\-logger\-version\fR
Print out the version of the Snap! Logger and exit.

.TP
\fB\-\-no\-log\fR
Turn off the logger so nothing gets printed out. This is somewhat similar
to a quiet or silent option that many Unix tools offer.

.TP
\fB\-\-option\-help\fR
Print the list of options supported by `ipmgr'.

.TP
\fB\-\-path\-to\-option\-definitions\fR
Option definitions can be defined in a .ini file. If it exists, this is the
path where it can be found.

.TP
\fB\-\-print\-option\fR \fIname\fR
This option is useful to debug your command line, environment variable, and
configuration files by printing the value of the named option. This tells
you what value the tool or service sees in the end.

Note that \fBipwall(8)\fR uses \fBfluid-settings(8)\fR. Some of the options
are defined there instead. Make sure to use the \fBfluid-settings-cli(1)\fR
command line instead to read those options.

.TP
\fB\-\-show\-option\-sources\fR
The `advgetopt' library has the ability to trace where each value is
read from: which file, the command line, the environment variable.
This option can be used to determine where a value is defined, which once
in a while is particularly useful.

.TP
\fB\-\-syslog\fR [\fIidentity\fR]
Send the logs to the system `syslog'. If specified, the `identity' is used
along each message.

.TP
\fB\-\-trace\fR
Change the logger severity to the TRACE level. All appenders accept all the
logs that they receive.

.TP
\fB\-V\fR, \fB\-\-version\fR
Print the \fBipwall(8)\fR version number, then exit.

.SH AUTHOR
Written by Alexis Wilke <alexis@m2osw.com>.
.SH "REPORTING BUGS"
Report bugs to <https://github.com/m2osw/iplock/issues>.
.br
ipwall home page: <https://snapwebsites.org/project/iplock>.
.SH COPYRIGHT
Copyright \(co 2022 Made to Order Software Corporation
.br
License: GPLv3
.br
This is free software: you are free to change and redistribute it.
.br
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
.BR ipload (1),
.BR ipload (5),
.BR iplock (1)
