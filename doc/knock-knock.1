.TH KNOCK-KNOCK 1 "September 2022" "knock-knock 1.x" "User Commands"
.SH NAME
knock-knock \- Knock at a firewall to allow access
.SH SYNOPSIS
.B knock-knock
[\fIOPTION\fR]... <hostname> [<protocol>:]<port> ...
.SH DESCRIPTION
The `knock-knock' tool is used to knock at a firewall to request access to
an otherwise hidden port. Port knocking is a way to hide administrative
services such as your SSH daemon. Even with a small number of ports, this
is a very effective way to protect your administrative ports.
.PP
Assuming you are using the `ipload' tool to load your iptables firewall,
you can simply use the `knocks = ...' parameter of the rules to enter
a sequence of ports. The `ipload' program automatically converts that
list in a set of iptables rules for you.

.SH "SECURITY"
In order to create the knocking mechanism, the `ipload' tool creates pure
`iptables' rules using the `recent' extension. This means the `knock-knock'
command line tool works on its own. There is no need for a server on the
other end. Plus the firewall rules do not change over time.
.PP
The number of ports available for port knocking is 65,535 (you do not want
to use port 0, even if it is a legal port). For each port you add to the
list, there are 65,535 possibilities. This means with just three ports in
your knocking list you end up with 65,535 power 3 or 281,462,092,005,375
(281 trillion) possibilities, which gives each hacker attempt about 1 chance
in 140 trillion to access your service.
.PP
Tools such as `nmap' are used to scan your ports to discover services that
are running. By default, it scans the ports in sequence. This means you
should not chose knocking ports that follow each other. The `ipload' tool
actually enforces that rule if you specify 3 or more ports. These cannot
following each other or preceed each other.
.PP
This reduces the number of possibilities, but it is still quite large.
The number of sequences S of N sorted ports over K = 65,535 possible ports
is computed as: K! / (N! * (K - N)!) x 2. This is 93,816,402,542,590
possibilities that are not allowed. So you still have 187,645,689,462,785
possibilities (187 trillion, or about 1 chance in 93 trillion that the
hacker finds your 3 port knocking sequence).
.PP
Note that the number of possibilities is further diminished by the fact
that we do not allow your sequence to include the destination ports that
you are trying to access. So if you are trying to open port 22, the knocking
sequence cannot include port 22.
.PP
If you would like to compute the number of possibilities, there is a script
which computes the number as described above. The script is named 
`knock-knock-possibilities`.
.PP
Finally, the sequence of knocking port must not have any duplicates.

.SH "HOW DOES IT WORK?"
The knocking is simply a connection between the client machine on which
you run `knock-knock' and the server machine with the firewall you need
to open.
.PP
When using the "tcp:" protocol, the code uses a `connect()' call. This
generates a TCP SYN message. Then `knock-knock' closes the socket
immediately.
.PP
When using the "udp:" protocol, the code sends a one byte message. It
does not expect any reply. Just as with the TCP protocol, `knock-knock'
closes the socket immediately after it sent the message.

.SH "DELAY"
The `--delay' option let you change the delay between each knock. By default
this is set to 0.1 seconds.
.PP
The delay also happens after the last knock. In other words, by default
`knock-knock' quits 0.1 seconds after the last knock was sent to the server.

.SH "EXAMPLE"
The following connects to port 300 with TCP.

It then sleeps for 0.1s (100ms).

Next it sends a UDP message of 1 byte (a zero).

Again it sleeps for 0.1s.

Finally, it does a connect to port 200 with TCP.

Just before quitting, it waits one more time 0.1s.

    knock-knock 192.168.1.10 300 udp:100 200 --delay 0.1s --verbose

The `--verbose' option asks `knock-knock' to print each time it connects
to a TCP port or sends a UDP message.

Once the function returns, you can use the port you just opened. Say this
is a an SSH connection, you can now do:

    ssh 192.168.1.10

Note that the default is to let the knock open for one hour. After that you
need to knock again to reopen the port to yourself (i.e. the firewall knows
your IP address and it will limit connections to that port only to your IP
address for one hour).

.SH "COMMAND LINE OPTIONS"
.TP
\fB\-\-build\-date\fR
Display the date and time when the tool was last built.

.TP
\fB\-\-command\-help\fR
List the commands understood by `knock-knock'.

.TP
\fB\-\-compiler\-version\fR
Output the version information of the C++ compiler used to compile the
`advgetopt' library. In most cases, this is the same as the compiler used
to compile the `knock-knock' tool.

.TP
\fB\-\-config\-dir\fR [\fISOURCE\fR]...
Define a list of configuration directories to search for configuration files.

.TP
\fB\-\-configuration\-filenames\fR
List the filenames of all the configuration files `knock-knock' reads to get
initialized.

.TP
\fB\-\-console\fR
Print the logs out to the console. This overrides the logger configuration
files which in the case of `knock-knock' is to write to your console.

.TP
\fB\-C\fR, \fB\-\-copyright\fR
Print out the copyright notice of the `knock-knock' tool.

.TP
\fB\-\-debug\fR
Change the logger severity to the `debug' level. This command line option
changes the level of all the appenders configured for `knock-knock'.

.TP
\fB\-\-delay\fR \fIDURATION\fR
Define how long to wait between each knock. The first knock is sent as soon
as possible. Then the delay is applied before sending the next knock. The
delay is also applied after the last knock and before exiting the application.

The delay is specified as a duration. You may use a decimal number (i.e. "0.3")
followed by one of `s[econd[s]]', `m[inute[s]]', `h[our[s]]', `d[ay[s]]',
`w[eek[s]]', `m[onth[s]]', `y[ear[s]]'. The default is seconds. You may use 0
in which case no delay is applied. With the current `ipload' rule settings,
no delays are required. However, if you use UDP packets, it probably is a
good idea to always use a delay or the packets may not arrive in the expected
order.

.TP
\fB\-\-environment\-variable\-name\fR
Print the name of the variable to the console. This variable can be used
to enter options instead of writing them on the command line or the
configuration file. Commands are not allowed in the environment variable.

.TP
\fB\-\-except\-stack\-collect\fR \fIno|yes|simple|complete\fR
Defines what exceptions are expected to collect from the stack.
Nearly all our exceptions are expected to stop a process. This command line
option gives you the ability to define how much information is to be collected
from the stack trace when that exception occurred. By default, it is set to
`yes' (which is the synomym of `simple'). With the logger, that exception
stack information can automatically be logged to your log file. Very useful
to debug issues in your software running on a remote server.

.TP
\fB\-\-force\-severity\fR \fIlevel\fR
Change the logger severity to this specific level. This new level is
applied to all the defined appenders. The level is changed whether it
is higher or lower than the current appender's level.

.TP
\fB\-\-has\-sanitizer\fR
Print whether this version was compiled with the C++ compiler sanitizer.

.TP
\fB\-h\fR, \fB\-\-help\fR
Print a brief document about the tool usage, then exit.

.TP
\fB\-L\fR, \fB\-\-license\fR
Print out the license of `knock-knock' and exit.

.TP
\fB--list-appenders\fR
List the available appenders as used by the logger.

.TP
\fB\-\-list\-severities\fR
List the available severities as used by the logger.

.TP
\fB\-\-log\-component\fR \fIname\fR...
Define one or more component name to filter the logs. Only logs with that
component are output, others are ignored. You can use the `!' (exclamation
mark) character in front of a name to exclude logs with that component.

.TP
\fB\-\-log\-config\fR \fIfilename\fR
Only load this very configuration file to setup the logger.

.TP
\fB\-\-log\-config\-path\fR \fIpath\fR
Define a path to search for log configuration files instead of using the
defaults.

.TP
\fB\-\-log\-file\fR \fIfilename\fR
Save the logs in this specific file instead of what is defined in the
configuration files.

.TP
\fB\-\-log\-severity\fR \fIlevel\fR
Change the severity to this level unless the appender already accepts logs
for a lower level. So for example, an appender setup to output logs with a
severity level of `error' or higher is affected by the `warning' level.
An appender setup to output logs with a severity level of `info' does not
changed when setting this command line option to `warning'.

.TP
\fB\-\-logger\-configuration\-filenames\fR
List the files that the logger reads to be setup. If no files are found,
then messages appear in the console by default.

.TP
\fB\-\-logger\-hide\-banner\fR
Request that the logger does not print the banner in the console. This is
particularly useful for command line tools (opposed to a service). The
`knock-knock' tool automatically turns this option on.

.TP
\fB\-\-logger\-plugin\-paths\fR \fIpath1:path2:...\fR
This option allows you to change the path(s) to the `snaplogger' plugins. You
can enter multiple paths by separating them with a colon (:).

.TP
\fB\-\-logger\-show\-banner\fR
Request that the logger prints its banner when it starts. This is useful
if you run a tool from a service and want to make sure the administrator
knows which version of the tool is being used.

.TP
\fB\-\-logger\-version\fR
Print out the version of the Snap! Logger and exit.

.TP
\fB\-\-no\-log\fR
Turn off the logger so nothing gets printed out. This is somewhat similar
to a quiet or silent option that many Unix tools offer.

.TP
\fB\-\-option\-help\fR
Print the list of options supported by `ipmgr'.

.TP
\fB\-\-path\-to\-option\-definitions\fR
Option definitions can be defined in a .ini file. If it exists, this is the
path where it can be found.

.TP
\fB\-\-print\-option\fR \fIname\fR
This option is useful to debug your command line, environment variable, and
configuration files by printing the value of the named option. This tells
you what value the tool or service sees in the end.

Note that `ipwall' uses `fluid-settings'. Some of the options are defined
there instead. Make sure to use the `fluid-settings-cli(1)' command line
instead to read those options.

.TP
\fB\-\-protocol\fR \fItcp|udp\fR
Define the default protocol. Internally, the default is "tcp". You may
change the default to "udp". You can specify the protocol when you specify
a port like so: "<protocol>:<port>". For example, to use a UDP message with
port 505, you write: "udp:505".

.TP
\fB\-\-show\-option\-sources\fR
The `advgetopt' library has the ability to trace where each value is
read from: which file, the command line, the environment variable.
This option can be used to determine where a value is defined, which once
in a while is particularly useful.

.TP
\fB\-\-syslog\fR [\fIidentity\fR]
Send the logs to the system `syslog'. If specified, the `identity' is used
along each message.

.TP
\fB\-\-trace\fR
Change the logger severity to the TRACE level. All appenders accept all the
logs that they receive.

.TP
\fB\-v\fR, \fB\-\-verbose\fR
Print information as `knock-knock' does work.

.TP
\fB\-V\fR, \fB\-\-version\fR
Print the `knock-knock' version number, then exit.

.SH AUTHOR
Written by Alexis Wilke <alexis@m2osw.com>.
.SH "REPORTING BUGS"
Report bugs to <https://github.com/m2osw/iplock/issues>.
.br
iplock home page: <https://snapwebsites.org/project/iplock>.
.SH COPYRIGHT
Copyright \(co 2022-2025  Made to Order Software Corp.  All Rights Reserved
.br
License: GPLv3
.br
This is free software: you are free to change and redistribute it.
.br
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
.BR ipload (8),
.BR ipload (5),
.BR iplock (1),
.BR iprecent (1),
.BR ipwall (8),
.BR showfw (1)
